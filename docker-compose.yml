services:
  db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${SQL_SA_PASSWORD}
    volumes:
      - ./DataBase/data-2022:/var/opt/mssql/data
      - ./DataBase/log-2022:/var/opt/mssql/log
      - ./DataBase/backup-2022:/var/opt/mssql/backup
    restart: unless-stopped
    mem_limit: 4g
    mem_reservation: 2g
    cpus: 2
    healthcheck:
      test: ["CMD-SHELL", "test -f /var/opt/mssql/data/master.mdf && exit 0 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    networks:
      - app-network

  init-db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    user: root
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${SQL_SA_PASSWORD}
    volumes:
      - ./DataBase/init.sql:/init.sql
    command: >
      /bin/bash -c "
        apt-get update && 
        apt-get install -y curl gnupg && 
        curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - && 
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list > /etc/apt/sources.list.d/mssql-release.list && 
        apt-get update && 
        ACCEPT_EULA=Y apt-get install -y mssql-tools18 && 
        sleep 30s && 
        until /opt/mssql-tools18/bin/sqlcmd -S db,1433 -U sa -P '${SQL_SA_PASSWORD}' -C -Q 'SELECT 1'; do echo 'Waiting for SQL Server...'; sleep 5; done && 
        echo 'Running init.sql' && 
        /opt/mssql-tools18/bin/sqlcmd -S db,1433 -U sa -P '${SQL_SA_PASSWORD}' -C -i /init.sql
      "
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  web:
    build:
      context: ./.
      dockerfile: BackendWebService.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=db;Database=Sal7ly;User Id=sa;Password=${SQL_SA_PASSWORD};Encrypt=false
    volumes:
      - ./web-data/data-protection-keys:/home/app/.aspnet/DataProtection-Keys
    depends_on:
      init-db:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    ports:
      - "8082:8080"
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
    driver: bridge